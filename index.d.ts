// Generated by dts-bundle v0.5.0
// Dependencies for this module:
//   ../openlayers

import ol = require("openlayers");

/**
    * OpenLayers 3 Popup Overlay.
    * See [the examples](./examples) for usage. Styling can be done via CSS.
    * @constructor
    * @extends {ol.Overlay}
    * @param {Object} opt_options Overlay options, extends olx.OverlayOptions adding:
    *                              **`panMapIfOutOfView`** `Boolean` - Should the
    *                              map be panned so that the popup is entirely
    *                              within view.
    */
export type SourceType = HTMLElement | string | JQueryDeferred<HTMLElement | string>;
export type SourceCallback = () => SourceType;
/**
    * The constructor options 'must' conform
    */
export interface IPopupOptions extends olx.OverlayOptions {
        insertFirst?: boolean;
        panMapIfOutOfView?: boolean;
        ani?: (args: any) => ol.PreRenderFunction;
        ani_opts?: olx.animation.PanOptions;
}
/**
    * The control formerly known as ol.Overlay.Popup
    */
export class Popup extends ol.Overlay {
        options: IPopupOptions;
        content: HTMLDivElement;
        domNode: HTMLDivElement;
        closer: HTMLAnchorElement;
        pages: Paging;
        constructor(options?: IPopupOptions);
        dispatch(name: string): void;
        show(coord: ol.Coordinate, html: string): this;
        hide(): this;
        detach(): {
                off: () => void;
        };
        panIntoView(): void;
}

/**
  * Collection of "pages"
  */
class Paging {
    options: {
        popup: Popup.Popup;
    };
    domNode: HTMLDivElement;
    constructor(options: {
        popup: Popup.Popup;
    });
    activeIndex: number;
    count: number;
    dispatch(name: string): void;
    on(name: string, listener: EventListener): void;
    add(source: Popup.SourceType | Popup.SourceCallback, geom?: ol.geom.Geometry): void;
    clear(): void;
    goto(index: number): void;
    next(): void;
    prev(): void;
}
export = Paging;

